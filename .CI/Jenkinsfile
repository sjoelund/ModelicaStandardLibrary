pipeline {
  agent none
  environment {
    LC_ALL = 'C.UTF-8'
  }
  stages {
    stage('build') {
      parallel {
        stage('amd64') {
          agent {
            docker {
              image 'modelicastandardlibrary/build-deps:amd64-20190513'
              label 'linux'
              alwaysPull true
            }
          }
          environment {
            LIBDIR = "linux64"
          }
          steps {
            sh 'hostname'
            autotools('gcc-4.8')
            autotools('gcc-5')
            autotools('clang-8')
          }
        }
        stage('i386') {
          agent {
            docker {
              image 'modelicastandardlibrary/build-deps:i386-20190513'
              label 'linux'
              alwaysPull true
            }
          }
          environment {
            LIBDIR = "linux32"
          }
          steps {
            sh 'hostname'
            autotools('gcc-4.8')
            autotools('gcc-5')
            autotools('clang-8')
          }
        }
      }
    }
  }
}

def autotools(CC) {
  sh """
  export CC=$CC
  rm -rf Modelica/Resources/Library/*
  mkdir -p Modelica/Resources/Library/\$LIBDIR
  cd Modelica/Resources/BuildProjects/autotools
  ./autogen.sh
  ./configure --prefix="\$PWD/../../Library/\$LIBDIR"
  make --output-sync -j4
  make install
  """
}
